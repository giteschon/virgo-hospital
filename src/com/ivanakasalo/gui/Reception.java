/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ivanakasalo.gui;

import com.ivanakasalo.bl.*;
import com.ivanakasalo.model.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Ivana
 */
public class Reception extends javax.swing.JFrame {

    private final HospitalManager manager = new HospitalManager();
    private final static double VAT = 0.25;
    private final Date today = new Date(Calendar.getInstance().getTime().getTime());

    private List<Patient> emergencyPatients = new ArrayList<>();
    private List<Patient> patientList = new ArrayList<>();

    private JLabel lblTitle;
    private JLabel lblName = new JLabel("Name");
    private JLabel lblMiddleName = new JLabel("Middle name");
    private JLabel lblSurname = new JLabel("Surname");
    private JLabel lblSex = new JLabel("Sex");
    private JLabel lblDateOfBirth = new JLabel("Date of birth");
    private JLabel lblDate = new JLabel("Date");
    private JLabel lblTelephone2 = new JLabel("Contact Telephone Number:");
    private JLabel lblNextOfKinName = new JLabel("Name of Next-of-Kin:");
    private JLabel lblNextOfKinMiddleName = new JLabel("Middle name of Next-of-Kin:");
    private JLabel lblNextOfKinSurname = new JLabel("Surname of Next-of-Kin:");
    private JLabel lblRelationship = new JLabel("Relationship to Outpatient:");
    private JLabel lblStatementOfComplaint = new JLabel("Brief Statement of Complaint");
    private JButton btnAddEmergencyPatient = new JButton("Add emergency patient");

    private final JLabel txtDate = new JLabel(String.valueOf(today));

    private JTextField txtName = new JTextField(20);
    private JTextField txtMiddleName = new JTextField(20);
    private JTextField txtSurname = new JTextField(20);
    private JComboBox ddlSex = new JComboBox();
    private JTextField txtDateOfBirth = new JTextField(20);

    private JTextField txtTelephone2 = new JTextField(20);
    private JTextField txtNextOfKinName = new JTextField(20);
    private JTextField txtNextOfKinMiddleName = new JTextField(20);
    private JTextField txtNextOfKinSurname = new JTextField(20);
    private JComboBox ddlRelationship = new JComboBox();
    private JComboBox ddlContactType = new JComboBox();
    private JTextField txtStatementOfComplaint = new JTextField(20);

    private ArrayList<JPanel> navList = new ArrayList<>();

    /**
     * Creates new form Reception
     */
    public Reception() {
        initComponents();
        Utilities.setFormLocation(this);
        //samo da se prikaze prazan ekran
        GuiUtilities.changePanel(container, pnlMiniReg);

        Statics.patiensToBeCharged = new ArrayList<>();
        fillNavigationList();
        fillTableMedicalPersonnel();
        fillPatientList();

        //pnlEmergencyPatients.setLayout(new BoxLayout(pnlEmergencyPatients, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox<>();
        nav = new javax.swing.JPanel();
        navContainer = new javax.swing.JPanel();
        btnMiniReg = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnFullReg = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnMedicalPersonnel = new javax.swing.JPanel();
        btnMini2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnAppointment = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnCharge = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnGenerateReport = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        pnlPatientsToBeCharged = new javax.swing.JPanel();
        pnlEmergencyPatients = new javax.swing.JPanel();
        pnlPatientsInLine = new javax.swing.JPanel();
        container = new javax.swing.JLayeredPane();
        pnlMiniReg = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        scrollpnlFullReg = new javax.swing.JScrollPane();
        pnlFullReg = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtFullState = new javax.swing.JTextField();
        txtFullNextStreet = new javax.swing.JTextField();
        txtFullnextNo = new javax.swing.JTextField();
        txtFullNextCity = new javax.swing.JTextField();
        txtFullCity = new javax.swing.JTextField();
        txtFullNextFirstName = new javax.swing.JTextField();
        txtFullPermanentStreet = new javax.swing.JTextField();
        txtFullNextMiddleName = new javax.swing.JTextField();
        txtFullPermanentArea = new javax.swing.JTextField();
        txtFullPermanentCity = new javax.swing.JTextField();
        txtFullPermanentsState = new javax.swing.JTextField();
        txtFullWork = new javax.swing.JTextField();
        txtFullNextSurname = new javax.swing.JTextField();
        txtFullMiddleName = new javax.swing.JTextField();
        txtFullSurname = new javax.swing.JTextField();
        txtFullStreet = new javax.swing.JTextField();
        txtFullStreetNo = new javax.swing.JTextField();
        ddlFullSex = new javax.swing.JComboBox<>();
        ddlFullPincode = new javax.swing.JComboBox<>();
        ddlFullRelationship = new javax.swing.JComboBox<>();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jLabel98 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        jLabel105 = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jLabel108 = new javax.swing.JLabel();
        txtFullNoOfDependents = new javax.swing.JTextField();
        txtFullHeight = new javax.swing.JTextField();
        txtFullWeight = new javax.swing.JTextField();
        txtFullGrossAnnual = new javax.swing.JTextField();
        txtFullStimulants = new javax.swing.JTextField();
        txtFullNoCigaretter = new javax.swing.JTextField();
        txtFullNoDrinks = new javax.swing.JTextField();
        txtFullCoffe = new javax.swing.JTextField();
        txtFullSoftDrinks = new javax.swing.JTextField();
        txtFullDiabetic = new javax.swing.JTextField();
        txtFullRegularMeals = new javax.swing.JTextField();
        txtFullHyperTensitive = new javax.swing.JTextField();
        txtFullCardiac = new javax.swing.JTextField();
        txtFullRespiratory = new javax.swing.JTextField();
        txtFullDigestive = new javax.swing.JTextField();
        txtFullNextWork = new javax.swing.JTextField();
        txtFullAllergies = new javax.swing.JTextField();
        txtFullOrthopedic = new javax.swing.JTextField();
        txtFullMuscular = new javax.swing.JTextField();
        txtFullNeurological = new javax.swing.JTextField();
        ddlFullBlood = new javax.swing.JComboBox<>();
        ddlFullSmoker = new javax.swing.JComboBox<>();
        ddlFullOccupation = new javax.swing.JComboBox<>();
        ddlFullAcohol = new javax.swing.JComboBox<>();
        ddlFullVegetarian = new javax.swing.JComboBox<>();
        jLabel109 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        emptyLblToFillSpace = new javax.swing.JLabel();
        txtFullPresentState = new javax.swing.JTextField();
        txtFullDateofVirth = new javax.swing.JTextField();
        txtFullNextArea = new javax.swing.JTextField();
        txtFullNextState = new javax.swing.JTextField();
        txtFullPermanentNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFullStatement = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtFullPreviousTreatment = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtFullHospitalTreated = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtFullMajorSurgeries = new javax.swing.JTextArea();
        txtFullSpecificDrugs = new javax.swing.JTextField();
        btnAddPatient = new javax.swing.JButton();
        ddlFullMarital = new javax.swing.JComboBox<>();
        ddlFullPermanentPincode = new javax.swing.JComboBox<>();
        ddlFullKinPincode = new javax.swing.JComboBox<>();
        ddlFullHomeFood = new javax.swing.JComboBox<>();
        btnEditPatient = new javax.swing.JButton();
        btnFullSendToDoctor = new javax.swing.JButton();
        pnlMedicalPersonnel = new javax.swing.JPanel();
        pnlCrud = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtMedicalMiddleName = new javax.swing.JTextField();
        txtMedicalSurname = new javax.swing.JTextField();
        txtMedicalFirstName = new javax.swing.JTextField();
        btnAddMedicalPersonnel = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        btnEditMedicalPersonnel = new javax.swing.JButton();
        btnDeleteMedicalPersonnel = new javax.swing.JButton();
        txtMedicalNo = new javax.swing.JTextField();
        txtMedicalCity = new javax.swing.JTextField();
        txtMedicalCountry = new javax.swing.JTextField();
        ddlMedicalOccupation = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        ddlMedicalPincode = new javax.swing.JComboBox<>();
        ddlMedicalDoctor = new javax.swing.JComboBox<>();
        ddlMedicalAvailable = new javax.swing.JComboBox<>();
        txtMedicalStreet = new javax.swing.JTextField();
        txtMedicalWork = new javax.swing.JTextField();
        pnlTable = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblMedicalPersonnel = new javax.swing.JTable();
        pnlAppointment = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblPatientList = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        txtFollowUpDate = new javax.swing.JTextField();
        btnFollowUpAppointment = new javax.swing.JButton();
        pnlCharge = new javax.swing.JPanel();
        pnlInvoiceSettings = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        txtInvoiceOpid = new javax.swing.JTextField();
        jLabel118 = new javax.swing.JLabel();
        ddlInvoicePayment = new javax.swing.JComboBox<>();
        btnAddInvoice = new javax.swing.JButton();
        pnlInvoice = new javax.swing.JPanel();
        jLabel113 = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        lblChargeName = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        lblChargeSurname = new javax.swing.JLabel();
        lblChargeTestPrice = new javax.swing.JLabel();
        lblChargeMedicationDetails = new javax.swing.JLabel();
        lblChargeConsultationDetails = new javax.swing.JLabel();
        lblChargeopid5 = new javax.swing.JLabel();
        lblChargeopid6 = new javax.swing.JLabel();
        lblChargeInvoiceNo = new javax.swing.JLabel();
        lblChargeSum = new javax.swing.JLabel();
        lblChargeopid9 = new javax.swing.JLabel();
        lblChargeopid10 = new javax.swing.JLabel();
        lblChargeTotal = new javax.swing.JLabel();
        lblChargeVat = new javax.swing.JLabel();
        lblChargeMedicationPrice = new javax.swing.JLabel();
        lblChargeConsultationPrice = new javax.swing.JLabel();
        lblChargetestDetails = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        lblChargeopid12 = new javax.swing.JLabel();
        lblChargeOpid1 = new javax.swing.JLabel();
        lblChargeOpid = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        lblChargeInvoiceDate = new javax.swing.JLabel();
        lblChargePaymentType = new javax.swing.JLabel();
        pnlReport = new javax.swing.JPanel();
        reportNav = new javax.swing.JPanel();
        btnDaily = new javax.swing.JButton();
        btnWeekly = new javax.swing.JButton();
        btnMonthly = new javax.swing.JButton();
        report = new javax.swing.JPanel();
        reportContainer = new javax.swing.JLayeredPane();
        pnlDaily = new javax.swing.JScrollPane();
        pnlReportDaily = new javax.swing.JPanel();
        jLabel124 = new javax.swing.JLabel();
        jLabel125 = new javax.swing.JLabel();
        jLabel126 = new javax.swing.JLabel();
        jLabel127 = new javax.swing.JLabel();
        lblReportDailyNewPatients = new javax.swing.JLabel();
        lblReportDailyFollowUpPatients = new javax.swing.JLabel();
        lblReportDailyPatientsSeenByVariousDoctors = new javax.swing.JLabel();
        pnlWeekly = new javax.swing.JScrollPane();
        pnlReportWeeklyMonthly = new javax.swing.JPanel();

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1366, 768));

        nav.setBackground(new java.awt.Color(176, 224, 230));
        nav.setMaximumSize(new java.awt.Dimension(300, 32767));
        nav.setLayout(new java.awt.GridLayout(2, 0));

        navContainer.setLayout(new java.awt.GridLayout(6, 0));

        btnMiniReg.setBackground(new java.awt.Color(176, 224, 230));
        btnMiniReg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnMiniRegMousePressed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(176, 224, 230));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_User_25px.png"))); // NOI18N
        jLabel1.setText("Mini Registration");

        javax.swing.GroupLayout btnMiniRegLayout = new javax.swing.GroupLayout(btnMiniReg);
        btnMiniReg.setLayout(btnMiniRegLayout);
        btnMiniRegLayout.setHorizontalGroup(
            btnMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMiniRegLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnMiniRegLayout.setVerticalGroup(
            btnMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMiniRegLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnMiniReg);

        btnFullReg.setBackground(new java.awt.Color(176, 224, 230));
        btnFullReg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFullRegMouseClicked(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(176, 224, 230));
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_User_25px.png"))); // NOI18N
        jLabel5.setText("Full Registration");

        javax.swing.GroupLayout btnFullRegLayout = new javax.swing.GroupLayout(btnFullReg);
        btnFullReg.setLayout(btnFullRegLayout);
        btnFullRegLayout.setHorizontalGroup(
            btnFullRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnFullRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnFullRegLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnFullRegLayout.setVerticalGroup(
            btnFullRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnFullRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnFullRegLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnFullReg);

        btnMedicalPersonnel.setBackground(new java.awt.Color(176, 224, 230));
        btnMedicalPersonnel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMedicalPersonnelMouseClicked(evt);
            }
        });

        btnMini2.setBackground(new java.awt.Color(176, 224, 230));

        jLabel3.setBackground(new java.awt.Color(176, 224, 230));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_User_Group_25px.png"))); // NOI18N
        jLabel3.setText("Medical Personnel");

        javax.swing.GroupLayout btnMini2Layout = new javax.swing.GroupLayout(btnMini2);
        btnMini2.setLayout(btnMini2Layout);
        btnMini2Layout.setHorizontalGroup(
            btnMini2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnMini2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMini2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnMini2Layout.setVerticalGroup(
            btnMini2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnMini2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMini2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout btnMedicalPersonnelLayout = new javax.swing.GroupLayout(btnMedicalPersonnel);
        btnMedicalPersonnel.setLayout(btnMedicalPersonnelLayout);
        btnMedicalPersonnelLayout.setHorizontalGroup(
            btnMedicalPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnMedicalPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMedicalPersonnelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnMini2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnMedicalPersonnelLayout.setVerticalGroup(
            btnMedicalPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnMedicalPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnMedicalPersonnelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnMini2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnMedicalPersonnel);

        btnAppointment.setBackground(new java.awt.Color(176, 224, 230));
        btnAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAppointmentMouseClicked(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(176, 224, 230));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_Send_File_25px_2.png"))); // NOI18N
        jLabel6.setText("Make appointment");

        javax.swing.GroupLayout btnAppointmentLayout = new javax.swing.GroupLayout(btnAppointment);
        btnAppointment.setLayout(btnAppointmentLayout);
        btnAppointmentLayout.setHorizontalGroup(
            btnAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnAppointmentLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnAppointmentLayout.setVerticalGroup(
            btnAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnAppointmentLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnAppointment);

        btnCharge.setBackground(new java.awt.Color(176, 224, 230));
        btnCharge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChargeMouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(176, 224, 230));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_Purse_25px.png"))); // NOI18N
        jLabel2.setText("Charge Patient");

        javax.swing.GroupLayout btnChargeLayout = new javax.swing.GroupLayout(btnCharge);
        btnCharge.setLayout(btnChargeLayout);
        btnChargeLayout.setHorizontalGroup(
            btnChargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnChargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnChargeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnChargeLayout.setVerticalGroup(
            btnChargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnChargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnChargeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnCharge);

        btnGenerateReport.setBackground(new java.awt.Color(176, 224, 230));
        btnGenerateReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGenerateReportMouseClicked(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(176, 224, 230));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ivanakasalo/icons/icons8_Report_Card_25px.png"))); // NOI18N
        jLabel4.setText("Generate Report");

        javax.swing.GroupLayout btnGenerateReportLayout = new javax.swing.GroupLayout(btnGenerateReport);
        btnGenerateReport.setLayout(btnGenerateReportLayout);
        btnGenerateReportLayout.setHorizontalGroup(
            btnGenerateReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
            .addGroup(btnGenerateReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnGenerateReportLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btnGenerateReportLayout.setVerticalGroup(
            btnGenerateReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
            .addGroup(btnGenerateReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btnGenerateReportLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        navContainer.add(btnGenerateReport);

        nav.add(navContainer);

        pnlPatientsToBeCharged.setLayout(new javax.swing.BoxLayout(pnlPatientsToBeCharged, javax.swing.BoxLayout.Y_AXIS));
        jPanel3.add(pnlPatientsToBeCharged);

        pnlEmergencyPatients.setLayout(new javax.swing.BoxLayout(pnlEmergencyPatients, javax.swing.BoxLayout.Y_AXIS));
        jPanel3.add(pnlEmergencyPatients);

        pnlPatientsInLine.setLayout(new javax.swing.BoxLayout(pnlPatientsInLine, javax.swing.BoxLayout.Y_AXIS));
        jPanel3.add(pnlPatientsInLine);

        nav.add(jPanel3);

        getContentPane().add(nav, java.awt.BorderLayout.LINE_START);

        container.setLayout(new javax.swing.OverlayLayout(container));

        pnlMiniReg.setBackground(new java.awt.Color(255, 102, 102));

        jButton1.setText("Send To Doctor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMiniRegLayout = new javax.swing.GroupLayout(pnlMiniReg);
        pnlMiniReg.setLayout(pnlMiniRegLayout);
        pnlMiniRegLayout.setHorizontalGroup(
            pnlMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMiniRegLayout.createSequentialGroup()
                .addContainerGap(863, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(62, 62, 62))
        );
        pnlMiniRegLayout.setVerticalGroup(
            pnlMiniRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMiniRegLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1)
                .addContainerGap(603, Short.MAX_VALUE))
        );

        container.add(pnlMiniReg);

        pnlFullReg.setBackground(new java.awt.Color(153, 153, 255));
        pnlFullReg.setLayout(new java.awt.GridBagLayout());

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel30, gridBagConstraints);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText("Basic Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel31, gridBagConstraints);

        jLabel32.setText("OPID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel32, gridBagConstraints);

        jLabel33.setText("First name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel33, gridBagConstraints);

        jLabel34.setText("Middle name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel34, gridBagConstraints);

        jLabel35.setText("Surname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel35, gridBagConstraints);

        jLabel36.setText("Sex:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel36, gridBagConstraints);

        jLabel37.setText("Date of Birth:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel37, gridBagConstraints);

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel38.setText("Contact Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel38, gridBagConstraints);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel39.setText("Present Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel39, gridBagConstraints);

        jLabel40.setText("Street:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel40, gridBagConstraints);

        jLabel41.setText("No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel41, gridBagConstraints);

        jLabel42.setText("Pincode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel42, gridBagConstraints);

        jLabel43.setText("City:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel43, gridBagConstraints);

        jLabel44.setText("Area:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel44, gridBagConstraints);

        jLabel45.setText("State:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel45, gridBagConstraints);

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel46.setText("Permanent Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel46, gridBagConstraints);

        jLabel47.setText("Street:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel47, gridBagConstraints);

        jLabel48.setText("no:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel48, gridBagConstraints);

        jLabel49.setText("City:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel49, gridBagConstraints);

        jLabel50.setText("Area:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel50, gridBagConstraints);

        jLabel51.setText("State:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel51, gridBagConstraints);

        jLabel52.setText("Pincode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel52, gridBagConstraints);

        jLabel53.setText("Work Telephone:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel53, gridBagConstraints);

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel59.setText("Contact Next of Kin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel59, gridBagConstraints);

        jLabel60.setText("First name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel60, gridBagConstraints);

        jLabel61.setText("Middle name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel61, gridBagConstraints);

        jLabel62.setText("Surname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel62, gridBagConstraints);

        jLabel63.setText("Relationship with outpatient:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel63, gridBagConstraints);

        jLabel65.setText("Street:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel65, gridBagConstraints);

        jLabel66.setText("No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel66, gridBagConstraints);

        jLabel67.setText("Pincode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel67, gridBagConstraints);

        jLabel68.setText("Area:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel68, gridBagConstraints);

        jLabel69.setText("City:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlFullReg.add(jLabel69, gridBagConstraints);

        jLabel70.setText("Work Telephone:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        pnlFullReg.add(jLabel70, gridBagConstraints);

        jLabel71.setText("State:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 13, 1, 0);
        pnlFullReg.add(jLabel71, gridBagConstraints);

        txtFirstName.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFirstName, gridBagConstraints);

        txtFullState.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 1, 0);
        pnlFullReg.add(txtFullState, gridBagConstraints);

        txtFullNextStreet.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFullNextStreet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNextStreetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextStreet, gridBagConstraints);

        txtFullnextNo.setText("0");
        txtFullnextNo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 1, 0);
        pnlFullReg.add(txtFullnextNo, gridBagConstraints);

        txtFullNextCity.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextCity, gridBagConstraints);

        txtFullCity.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullCity, gridBagConstraints);

        txtFullNextFirstName.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextFirstName, gridBagConstraints);

        txtFullPermanentStreet.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullPermanentStreet, gridBagConstraints);

        txtFullNextMiddleName.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextMiddleName, gridBagConstraints);

        txtFullPermanentArea.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 1, 0);
        pnlFullReg.add(txtFullPermanentArea, gridBagConstraints);

        txtFullPermanentCity.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullPermanentCity, gridBagConstraints);

        txtFullPermanentsState.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 1, 0);
        pnlFullReg.add(txtFullPermanentsState, gridBagConstraints);

        txtFullWork.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullWork, gridBagConstraints);

        txtFullNextSurname.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextSurname, gridBagConstraints);

        txtFullMiddleName.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullMiddleName, gridBagConstraints);

        txtFullSurname.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullSurname, gridBagConstraints);

        txtFullStreet.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullStreet, gridBagConstraints);

        txtFullStreetNo.setText("0");
        txtFullStreetNo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 14, 1, 0);
        pnlFullReg.add(txtFullStreetNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(ddlFullSex, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(ddlFullPincode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(ddlFullRelationship, gridBagConstraints);

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel77.setText("Personal Details:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel77, gridBagConstraints);

        jLabel78.setText("Marital Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel78, gridBagConstraints);

        jLabel79.setText("No. of Dependents:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel79, gridBagConstraints);

        jLabel80.setText("Height:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel80, gridBagConstraints);

        jLabel81.setText("Weight:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel81, gridBagConstraints);

        jLabel82.setText("Blood Type - RH:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel82, gridBagConstraints);

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel83.setText("Profession Details:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel83, gridBagConstraints);

        jLabel84.setText("Occupation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel84, gridBagConstraints);

        jLabel85.setText("Gross Annual Income:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel85, gridBagConstraints);

        jLabel86.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel86.setText("Lifestyle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel86, gridBagConstraints);

        jLabel87.setText("Vegetarian/Non-Vegetarian:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel87, gridBagConstraints);

        jLabel88.setText("Smoker (Y/N):)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel88, gridBagConstraints);

        jLabel89.setText("Average No. of Cigarettes/Day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        pnlFullReg.add(jLabel89, gridBagConstraints);

        jLabel90.setText("Consumes Alocholic Beverage (Y/N):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel90, gridBagConstraints);

        jLabel91.setText("Average No of Drinks/Day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        pnlFullReg.add(jLabel91, gridBagConstraints);

        jLabel92.setText("Consumption of Soft Drinks/Day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel92, gridBagConstraints);

        jLabel93.setText("Have regular Meals/Breafast/Lunch/Dinner)?:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel93, gridBagConstraints);

        jLabel94.setText("Eat Home Food Predominantly?:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel94, gridBagConstraints);

        jLabel95.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel95.setText("Important Medical Complaints");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel95, gridBagConstraints);

        jLabel96.setText("Diabetic:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel96, gridBagConstraints);

        jLabel97.setText("HyperTensive:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel97, gridBagConstraints);

        jLabel98.setText("Use Stimulants(Specify):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel98, gridBagConstraints);

        jLabel99.setText("Consumption of Coffee-Tea/Day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel99, gridBagConstraints);

        jLabel100.setText("Cardiac Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel100, gridBagConstraints);

        jLabel101.setText("Resporatory Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel101, gridBagConstraints);

        jLabel102.setText("Digestive Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel102, gridBagConstraints);

        jLabel103.setText("Orthopedic Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel103, gridBagConstraints);

        jLabel104.setText("Muscular Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel104, gridBagConstraints);

        jLabel105.setText("Neurological Condition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel105, gridBagConstraints);

        jLabel106.setText("Know Allergies:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel106, gridBagConstraints);

        jLabel107.setText("Known Adverse Reaction to Specific Drugs:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel107, gridBagConstraints);

        jLabel108.setText("Major Surgeries (History):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel108, gridBagConstraints);

        txtFullNoOfDependents.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullNoOfDependents, gridBagConstraints);

        txtFullHeight.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullHeight, gridBagConstraints);

        txtFullWeight.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullWeight, gridBagConstraints);

        txtFullGrossAnnual.setText("0");
        txtFullGrossAnnual.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullGrossAnnual, gridBagConstraints);

        txtFullStimulants.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullStimulants, gridBagConstraints);

        txtFullNoCigaretter.setText("0");
        txtFullNoCigaretter.setPreferredSize(new java.awt.Dimension(30, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        pnlFullReg.add(txtFullNoCigaretter, gridBagConstraints);

        txtFullNoDrinks.setText("0");
        txtFullNoDrinks.setPreferredSize(new java.awt.Dimension(30, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        pnlFullReg.add(txtFullNoDrinks, gridBagConstraints);

        txtFullCoffe.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullCoffe, gridBagConstraints);

        txtFullSoftDrinks.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullSoftDrinks, gridBagConstraints);

        txtFullDiabetic.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullDiabetic, gridBagConstraints);

        txtFullRegularMeals.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullRegularMeals, gridBagConstraints);

        txtFullHyperTensitive.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullHyperTensitive, gridBagConstraints);

        txtFullCardiac.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullCardiac, gridBagConstraints);

        txtFullRespiratory.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullRespiratory, gridBagConstraints);

        txtFullDigestive.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullDigestive, gridBagConstraints);

        txtFullNextWork.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlFullReg.add(txtFullNextWork, gridBagConstraints);

        txtFullAllergies.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullAllergies, gridBagConstraints);

        txtFullOrthopedic.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullOrthopedic, gridBagConstraints);

        txtFullMuscular.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullMuscular, gridBagConstraints);

        txtFullNeurological.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(txtFullNeurological, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(ddlFullBlood, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(ddlFullSmoker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(ddlFullOccupation, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(ddlFullAcohol, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 9, 1, 0);
        pnlFullReg.add(ddlFullVegetarian, gridBagConstraints);

        jLabel109.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel109.setText("Basic Complaints:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel109, gridBagConstraints);

        jLabel110.setText("Statement of Complaint:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel110, gridBagConstraints);

        jLabel111.setText("History of Previous Treatment:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 34;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel111, gridBagConstraints);

        jLabel112.setText("Physician/Hospital Treated:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 35;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 36, 1, 0);
        pnlFullReg.add(jLabel112, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 30.0;
        pnlFullReg.add(emptyLblToFillSpace, gridBagConstraints);

        txtFullPresentState.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        pnlFullReg.add(txtFullPresentState, gridBagConstraints);

        txtFullDateofVirth.setText("01/01/01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        pnlFullReg.add(txtFullDateofVirth, gridBagConstraints);

        txtFullNextArea.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 30;
        pnlFullReg.add(txtFullNextArea, gridBagConstraints);

        txtFullNextState.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 31;
        pnlFullReg.add(txtFullNextState, gridBagConstraints);

        txtFullPermanentNo.setText("0");
        txtFullPermanentNo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        pnlFullReg.add(txtFullPermanentNo, gridBagConstraints);

        txtFullStatement.setColumns(20);
        txtFullStatement.setRows(5);
        jScrollPane1.setViewportView(txtFullStatement);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 33;
        pnlFullReg.add(jScrollPane1, gridBagConstraints);

        txtFullPreviousTreatment.setColumns(20);
        txtFullPreviousTreatment.setRows(5);
        jScrollPane2.setViewportView(txtFullPreviousTreatment);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 34;
        pnlFullReg.add(jScrollPane2, gridBagConstraints);

        txtFullHospitalTreated.setColumns(20);
        txtFullHospitalTreated.setRows(5);
        jScrollPane3.setViewportView(txtFullHospitalTreated);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 35;
        pnlFullReg.add(jScrollPane3, gridBagConstraints);

        txtFullMajorSurgeries.setColumns(20);
        txtFullMajorSurgeries.setRows(5);
        jScrollPane4.setViewportView(txtFullMajorSurgeries);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 30;
        pnlFullReg.add(jScrollPane4, gridBagConstraints);

        txtFullSpecificDrugs.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 29;
        pnlFullReg.add(txtFullSpecificDrugs, gridBagConstraints);

        btnAddPatient.setText("AddPatient");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 37;
        pnlFullReg.add(btnAddPatient, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        pnlFullReg.add(ddlFullMarital, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        pnlFullReg.add(ddlFullPermanentPincode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 30;
        pnlFullReg.add(ddlFullKinPincode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 18;
        pnlFullReg.add(ddlFullHomeFood, gridBagConstraints);

        btnEditPatient.setText("Edit Patient");
        btnEditPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 37;
        pnlFullReg.add(btnEditPatient, gridBagConstraints);

        btnFullSendToDoctor.setText("Send to Doctor");
        btnFullSendToDoctor.setEnabled(false);
        btnFullSendToDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToDoctorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        pnlFullReg.add(btnFullSendToDoctor, gridBagConstraints);

        scrollpnlFullReg.setViewportView(pnlFullReg);

        container.add(scrollpnlFullReg);

        pnlMedicalPersonnel.setLayout(new java.awt.BorderLayout());

        pnlCrud.setPreferredSize(new java.awt.Dimension(361, 441));
        pnlCrud.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("First name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Middle name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel10, gridBagConstraints);

        jLabel11.setText("Surname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Contact");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 1);
        pnlCrud.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Street:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel13, gridBagConstraints);

        jLabel14.setText("No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel14, gridBagConstraints);

        jLabel15.setText("Pincode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel15, gridBagConstraints);

        jLabel16.setText("Country");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel16, gridBagConstraints);

        jLabel17.setText("Work Telephone:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel17, gridBagConstraints);

        txtMedicalMiddleName.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalMiddleName, gridBagConstraints);

        txtMedicalSurname.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalSurname, gridBagConstraints);

        txtMedicalFirstName.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalFirstName, gridBagConstraints);

        btnAddMedicalPersonnel.setText("Add Medical Personnel");
        btnAddMedicalPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMedicalPersonnelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        pnlCrud.add(btnAddMedicalPersonnel, gridBagConstraints);

        jLabel23.setText("Occupation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel23, gridBagConstraints);

        jLabel24.setText("Doctor:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel24, gridBagConstraints);

        jLabel25.setText("Available:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel25, gridBagConstraints);

        jLabel26.setText("City:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 4);
        pnlCrud.add(jLabel26, gridBagConstraints);

        btnEditMedicalPersonnel.setText("Edit");
        btnEditMedicalPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMedicalPersonnelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlCrud.add(btnEditMedicalPersonnel, gridBagConstraints);

        btnDeleteMedicalPersonnel.setText("Delete");
        btnDeleteMedicalPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMedicalPersonnelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlCrud.add(btnDeleteMedicalPersonnel, gridBagConstraints);

        txtMedicalNo.setText("0");
        txtMedicalNo.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalNo, gridBagConstraints);

        txtMedicalCity.setPreferredSize(new java.awt.Dimension(100, 25));
        txtMedicalCity.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalCity, gridBagConstraints);

        txtMedicalCountry.setPreferredSize(new java.awt.Dimension(100, 25));
        txtMedicalCountry.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(txtMedicalCountry, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        pnlCrud.add(ddlMedicalOccupation, gridBagConstraints);

        jLabel29.setText("Work Details:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 0);
        pnlCrud.add(jLabel29, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        pnlCrud.add(ddlMedicalPincode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        pnlCrud.add(ddlMedicalDoctor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        pnlCrud.add(ddlMedicalAvailable, gridBagConstraints);

        txtMedicalStreet.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        pnlCrud.add(txtMedicalStreet, gridBagConstraints);

        txtMedicalWork.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        pnlCrud.add(txtMedicalWork, gridBagConstraints);

        pnlMedicalPersonnel.add(pnlCrud, java.awt.BorderLayout.LINE_START);

        pnlTable.setLayout(new java.awt.BorderLayout());

        tblMedicalPersonnel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "First name", "Middle  name", "Surname", "Is doctor", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblMedicalPersonnel);

        pnlTable.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        pnlMedicalPersonnel.add(pnlTable, java.awt.BorderLayout.CENTER);

        container.add(pnlMedicalPersonnel);

        pnlAppointment.setLayout(new java.awt.BorderLayout());

        tblPatientList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "First Name", "Surname", "DoctorID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblPatientList);

        pnlAppointment.add(jScrollPane7, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel18.setText("Date of follow-up appointement:");
        jPanel1.add(jLabel18);

        txtFollowUpDate.setText("01/01/01");
        jPanel1.add(txtFollowUpDate);

        btnFollowUpAppointment.setText("Make an appintement");
        btnFollowUpAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFollowUpAppointmentActionPerformed(evt);
            }
        });
        jPanel1.add(btnFollowUpAppointment);

        pnlAppointment.add(jPanel1, java.awt.BorderLayout.NORTH);

        container.add(pnlAppointment);

        pnlCharge.setLayout(new java.awt.BorderLayout());

        jLabel27.setText("OPID:");
        pnlInvoiceSettings.add(jLabel27);

        txtInvoiceOpid.setPreferredSize(new java.awt.Dimension(100, 20));
        pnlInvoiceSettings.add(txtInvoiceOpid);

        jLabel118.setText("Payment type:");
        pnlInvoiceSettings.add(jLabel118);

        pnlInvoiceSettings.add(ddlInvoicePayment);

        btnAddInvoice.setText("new Invoice");
        btnAddInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceActionPerformed(evt);
            }
        });
        pnlInvoiceSettings.add(btnAddInvoice);

        pnlCharge.add(pnlInvoiceSettings, java.awt.BorderLayout.PAGE_START);

        pnlInvoice.setLayout(new java.awt.GridBagLayout());

        jLabel113.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel113.setText("Patient details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        pnlInvoice.add(jLabel113, gridBagConstraints);

        jLabel114.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        pnlInvoice.add(jLabel114, gridBagConstraints);

        jLabel115.setText("Test:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        pnlInvoice.add(jLabel115, gridBagConstraints);

        jLabel116.setText("Consultation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlInvoice.add(jLabel116, gridBagConstraints);

        jLabel117.setText("Medication:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        pnlInvoice.add(jLabel117, gridBagConstraints);

        lblChargeName.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        pnlInvoice.add(lblChargeName, gridBagConstraints);

        jLabel119.setText("Surname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        pnlInvoice.add(jLabel119, gridBagConstraints);

        jLabel120.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel120.setText("Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        pnlInvoice.add(jLabel120, gridBagConstraints);

        jLabel121.setText("OPID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        pnlInvoice.add(jLabel121, gridBagConstraints);

        jLabel122.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel122.setText("Invoice item");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        pnlInvoice.add(jLabel122, gridBagConstraints);

        lblChargeSurname.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        pnlInvoice.add(lblChargeSurname, gridBagConstraints);

        lblChargeTestPrice.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        pnlInvoice.add(lblChargeTestPrice, gridBagConstraints);

        lblChargeMedicationDetails.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        pnlInvoice.add(lblChargeMedicationDetails, gridBagConstraints);

        lblChargeConsultationDetails.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        pnlInvoice.add(lblChargeConsultationDetails, gridBagConstraints);

        lblChargeopid5.setText("Sum:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        pnlInvoice.add(lblChargeopid5, gridBagConstraints);

        lblChargeopid6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChargeopid6.setText("Price");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        pnlInvoice.add(lblChargeopid6, gridBagConstraints);

        lblChargeInvoiceNo.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        pnlInvoice.add(lblChargeInvoiceNo, gridBagConstraints);

        lblChargeSum.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        pnlInvoice.add(lblChargeSum, gridBagConstraints);

        lblChargeopid9.setText("VAT:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        pnlInvoice.add(lblChargeopid9, gridBagConstraints);

        lblChargeopid10.setText("PaymentMethod:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        pnlInvoice.add(lblChargeopid10, gridBagConstraints);

        lblChargeTotal.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        pnlInvoice.add(lblChargeTotal, gridBagConstraints);

        lblChargeVat.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        pnlInvoice.add(lblChargeVat, gridBagConstraints);

        lblChargeMedicationPrice.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        pnlInvoice.add(lblChargeMedicationPrice, gridBagConstraints);

        lblChargeConsultationPrice.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        pnlInvoice.add(lblChargeConsultationPrice, gridBagConstraints);

        lblChargetestDetails.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        pnlInvoice.add(lblChargetestDetails, gridBagConstraints);

        total.setText("Total:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        pnlInvoice.add(total, gridBagConstraints);

        lblChargeopid12.setText("Total:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        pnlInvoice.add(lblChargeopid12, gridBagConstraints);

        lblChargeOpid1.setText("Invoice No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        pnlInvoice.add(lblChargeOpid1, gridBagConstraints);

        lblChargeOpid.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        pnlInvoice.add(lblChargeOpid, gridBagConstraints);

        jLabel123.setText("Invoice Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        pnlInvoice.add(jLabel123, gridBagConstraints);

        lblChargeInvoiceDate.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        pnlInvoice.add(lblChargeInvoiceDate, gridBagConstraints);

        lblChargePaymentType.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        pnlInvoice.add(lblChargePaymentType, gridBagConstraints);

        pnlCharge.add(pnlInvoice, java.awt.BorderLayout.CENTER);

        container.add(pnlCharge);

        pnlReport.setLayout(new java.awt.BorderLayout());

        reportNav.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnDaily.setText("Daily Report");
        btnDaily.setMargin(new java.awt.Insets(2, 25, 2, 25));
        btnDaily.setMinimumSize(new java.awt.Dimension(100, 50));
        btnDaily.setPreferredSize(new java.awt.Dimension(200, 50));
        btnDaily.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDailyMouseClicked(evt);
            }
        });
        reportNav.add(btnDaily);

        btnWeekly.setText("Weekly Report");
        btnWeekly.setMargin(new java.awt.Insets(2, 25, 2, 25));
        btnWeekly.setPreferredSize(new java.awt.Dimension(200, 50));
        btnWeekly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnWeeklyMouseClicked(evt);
            }
        });
        reportNav.add(btnWeekly);

        btnMonthly.setText("Monthly Report");
        btnMonthly.setMargin(new java.awt.Insets(2, 25, 2, 25));
        btnMonthly.setPreferredSize(new java.awt.Dimension(200, 50));
        btnMonthly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMonthlyMouseClicked(evt);
            }
        });
        reportNav.add(btnMonthly);

        pnlReport.add(reportNav, java.awt.BorderLayout.PAGE_START);

        report.setLayout(new java.awt.BorderLayout());

        reportContainer.setLayout(new javax.swing.OverlayLayout(reportContainer));

        pnlReportDaily.setLayout(new java.awt.GridBagLayout());

        jLabel124.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel124.setText("Number of patients seen by various doctors:");
        pnlReportDaily.add(jLabel124, new java.awt.GridBagConstraints());

        jLabel125.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel125.setText("Number of new patients:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlReportDaily.add(jLabel125, gridBagConstraints);

        jLabel126.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel126.setText("Number of follow up patients:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        pnlReportDaily.add(jLabel126, gridBagConstraints);

        jLabel127.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel127.setText("Summary for each patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        pnlReportDaily.add(jLabel127, gridBagConstraints);

        lblReportDailyNewPatients.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnlReportDaily.add(lblReportDailyNewPatients, gridBagConstraints);

        lblReportDailyFollowUpPatients.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnlReportDaily.add(lblReportDailyFollowUpPatients, gridBagConstraints);

        lblReportDailyPatientsSeenByVariousDoctors.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnlReportDaily.add(lblReportDailyPatientsSeenByVariousDoctors, gridBagConstraints);

        pnlDaily.setViewportView(pnlReportDaily);

        reportContainer.add(pnlDaily);

        pnlWeekly.setViewportView(pnlReportWeeklyMonthly);

        reportContainer.add(pnlWeekly);

        report.add(reportContainer, java.awt.BorderLayout.CENTER);

        pnlReport.add(report, java.awt.BorderLayout.CENTER);

        container.add(pnlReport);

        getContentPane().add(container, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMiniRegMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMiniRegMousePressed
        GuiUtilities.changePanel(container, pnlMiniReg);
        showPnlMiniRegControls();
        refreshPatientsToBeCharged();

        resetMiniReg();


    }//GEN-LAST:event_btnMiniRegMousePressed

    private void btnFullRegMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFullRegMouseClicked
        GuiUtilities.changePanel(container, scrollpnlFullReg);
        btnFullSendToDoctor.setEnabled(false);

        fillFullRegistrationWithAllDdls();

        refreshPatientsToBeCharged();


    }//GEN-LAST:event_btnFullRegMouseClicked

    private void btnMedicalPersonnelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMedicalPersonnelMouseClicked
        GuiUtilities.changePanel(container, pnlMedicalPersonnel);

        fillDdlOccupation(ddlMedicalOccupation);
        fillDdlBoolean(ddlMedicalDoctor);
        fillDdlBoolean(ddlMedicalAvailable);
        fillDdlPincode(ddlMedicalPincode);

        refreshPatientsToBeCharged();


    }//GEN-LAST:event_btnMedicalPersonnelMouseClicked

    private void btnAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAppointmentMouseClicked
        GuiUtilities.changePanel(container, pnlAppointment);

        refreshPatientsToBeCharged();


    }//GEN-LAST:event_btnAppointmentMouseClicked

    private void btnChargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChargeMouseClicked
        GuiUtilities.changePanel(container, pnlCharge);

        refreshPatientsToBeCharged();

        fillDdlWithObject(manager.getPaymentTypes(), ddlInvoicePayment);
    }//GEN-LAST:event_btnChargeMouseClicked

    private void btnGenerateReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerateReportMouseClicked
        GuiUtilities.changePanel(container, pnlReport);

        refreshPatientsToBeCharged();
    }//GEN-LAST:event_btnGenerateReportMouseClicked

    private void btnAddMedicalPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMedicalPersonnelActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblMedicalPersonnel.getModel();
        if (getBooleanFromDdl(ddlMedicalDoctor)) {
            addDoctor();
            model.fireTableDataChanged();
        } else {
            addMedicalPersonnel();
            model.fireTableDataChanged();
        }


    }//GEN-LAST:event_btnAddMedicalPersonnelActionPerformed

    private void btnEditMedicalPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMedicalPersonnelActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblMedicalPersonnel.getModel();

        if (getBooleanFromDdl(ddlMedicalDoctor)) {
            manager.editAddress(getDoctorFromMedical().getPresentAddress());
            manager.editDoctor(getDoctorFromMedical());

            model.fireTableDataChanged();

        } else {
            manager.editAddress(getMedicalPersonnelFromMedical().getPresentAddress());
            manager.editMedicalPersonnel(getMedicalPersonnelFromMedical());
            model.fireTableDataChanged();

        }
    }//GEN-LAST:event_btnEditMedicalPersonnelActionPerformed

    private void btnDeleteMedicalPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMedicalPersonnelActionPerformed
        if (getBooleanFromDdl(ddlMedicalDoctor)) {
            //  manager.deleteDoctor(getDoctorFromMedical().getId());
            manager.deleteDoctor(getIdFromTable(tblMedicalPersonnel, 4));

        } else {
            //manager.deleteMedicalPersonnel(getMedicalPersonnelFromMedical().getId());
            manager.deleteMedicalPersonnel(getIdFromTable(tblMedicalPersonnel, 4));

        }

    }//GEN-LAST:event_btnDeleteMedicalPersonnelActionPerformed

    private MedicalPersonnel personnel;
    private Doctor doctor;

    private void btnAddInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInvoiceActionPerformed
        int id = Utilities.getNumber(txtInvoiceOpid.getText());

        if (txtInvoiceOpid.getText() != null) {
            if (id != 0) {
                Patient patient = manager.getPatient(id);

                fillInvoiceWithData(patient);
            }
        }


    }//GEN-LAST:event_btnAddInvoiceActionPerformed

    private void btnDailyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDailyMouseClicked
        GuiUtilities.changePanel(reportContainer, pnlReportDaily);

        fillDailyReportData();
    }//GEN-LAST:event_btnDailyMouseClicked

    private void btnWeeklyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnWeeklyMouseClicked
        GuiUtilities.changePanel(reportContainer, pnlReportWeeklyMonthly);

        fillChart(manager.getNoOfNewPatientsForPeriod(Utilities.getDateOfTheWeek(0), Utilities.getDateOfTheWeek(6)), manager.getNoOfFollowUpPatientsForPeriod(today, Utilities.getDateOfTheWeek(0), Utilities.getDateOfTheWeek(6)));

    }//GEN-LAST:event_btnWeeklyMouseClicked

    private void btnMonthlyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthlyMouseClicked
        GuiUtilities.changePanel(reportContainer, pnlReportWeeklyMonthly);

        int lastDay = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH);
        fillChart(manager.getNoOfNewPatientsForPeriod(Utilities.getDateOfTheMonth(1), Utilities.getDateOfTheMonth(lastDay)), manager.getNoOfFollowUpPatientsForPeriod(today, Utilities.getDateOfTheMonth(1), Utilities.getDateOfTheMonth(lastDay)));
    }//GEN-LAST:event_btnMonthlyMouseClicked

    private void btnSendToDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToDoctorActionPerformed
        //   DoctorTreatment treatment= new DoctorTreatment();

        ChooseDoctor cd = new ChooseDoctor();


    }//GEN-LAST:event_btnSendToDoctorActionPerformed

    private void btnEditPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPatientActionPerformed
        Patient p = getPatient(patientID);

        if (emergencyPatients.contains(p)) {
            emergencyPatients.remove(p);
            patientList.add(p);
        }

        manager.editPatient(p);

        refreshPatientListView();
        refreshEmergencyPatientView();

    }//GEN-LAST:event_btnEditPatientActionPerformed

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        addPatient();
    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void txtFullNextStreetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNextStreetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNextStreetActionPerformed

    private void btnFollowUpAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFollowUpAppointmentActionPerformed
        int row = tblPatientList.getSelectedRow();
        int idPatient = Integer.parseInt(tblPatientList.getValueAt(row, 0).toString());

        int idDoctor = Integer.parseInt(tblPatientList.getValueAt(row, 3).toString());

        manager.addFutureAppointement(manager.getPatient(idPatient), manager.getDoctor(idDoctor), Utilities.getSqlDate(txtFollowUpDate.getText()));
    }//GEN-LAST:event_btnFollowUpAppointmentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reception.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reception.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reception.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reception.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reception().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddInvoice;
    private javax.swing.JButton btnAddMedicalPersonnel;
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JPanel btnAppointment;
    private javax.swing.JPanel btnCharge;
    private javax.swing.JButton btnDaily;
    private javax.swing.JButton btnDeleteMedicalPersonnel;
    private javax.swing.JButton btnEditMedicalPersonnel;
    private javax.swing.JButton btnEditPatient;
    private javax.swing.JButton btnFollowUpAppointment;
    private javax.swing.JPanel btnFullReg;
    private javax.swing.JButton btnFullSendToDoctor;
    private javax.swing.JPanel btnGenerateReport;
    private javax.swing.JPanel btnMedicalPersonnel;
    private javax.swing.JPanel btnMini2;
    private javax.swing.JPanel btnMiniReg;
    private javax.swing.JButton btnMonthly;
    private javax.swing.JButton btnWeekly;
    private javax.swing.JLayeredPane container;
    private javax.swing.JComboBox<String> ddlFullAcohol;
    private javax.swing.JComboBox<String> ddlFullBlood;
    private javax.swing.JComboBox<String> ddlFullHomeFood;
    private javax.swing.JComboBox<String> ddlFullKinPincode;
    private javax.swing.JComboBox<String> ddlFullMarital;
    private javax.swing.JComboBox<String> ddlFullOccupation;
    private javax.swing.JComboBox<String> ddlFullPermanentPincode;
    private javax.swing.JComboBox<String> ddlFullPincode;
    private javax.swing.JComboBox<String> ddlFullRelationship;
    private javax.swing.JComboBox<String> ddlFullSex;
    private javax.swing.JComboBox<String> ddlFullSmoker;
    private javax.swing.JComboBox<String> ddlFullVegetarian;
    private javax.swing.JComboBox<String> ddlInvoicePayment;
    private javax.swing.JComboBox<String> ddlMedicalAvailable;
    private javax.swing.JComboBox<String> ddlMedicalDoctor;
    private javax.swing.JComboBox<String> ddlMedicalOccupation;
    private javax.swing.JComboBox<String> ddlMedicalPincode;
    private javax.swing.JLabel emptyLblToFillSpace;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel125;
    private javax.swing.JLabel jLabel126;
    private javax.swing.JLabel jLabel127;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblChargeConsultationDetails;
    private javax.swing.JLabel lblChargeConsultationPrice;
    private javax.swing.JLabel lblChargeInvoiceDate;
    private javax.swing.JLabel lblChargeInvoiceNo;
    private javax.swing.JLabel lblChargeMedicationDetails;
    private javax.swing.JLabel lblChargeMedicationPrice;
    private javax.swing.JLabel lblChargeName;
    private javax.swing.JLabel lblChargeOpid;
    private javax.swing.JLabel lblChargeOpid1;
    private javax.swing.JLabel lblChargePaymentType;
    private javax.swing.JLabel lblChargeSum;
    private javax.swing.JLabel lblChargeSurname;
    private javax.swing.JLabel lblChargeTestPrice;
    private javax.swing.JLabel lblChargeTotal;
    private javax.swing.JLabel lblChargeVat;
    private javax.swing.JLabel lblChargeopid10;
    private javax.swing.JLabel lblChargeopid12;
    private javax.swing.JLabel lblChargeopid5;
    private javax.swing.JLabel lblChargeopid6;
    private javax.swing.JLabel lblChargeopid9;
    private javax.swing.JLabel lblChargetestDetails;
    private javax.swing.JLabel lblReportDailyFollowUpPatients;
    private javax.swing.JLabel lblReportDailyNewPatients;
    private javax.swing.JLabel lblReportDailyPatientsSeenByVariousDoctors;
    private javax.swing.JPanel nav;
    private javax.swing.JPanel navContainer;
    private javax.swing.JPanel pnlAppointment;
    private javax.swing.JPanel pnlCharge;
    private javax.swing.JPanel pnlCrud;
    private javax.swing.JScrollPane pnlDaily;
    private javax.swing.JPanel pnlEmergencyPatients;
    private javax.swing.JPanel pnlFullReg;
    private javax.swing.JPanel pnlInvoice;
    private javax.swing.JPanel pnlInvoiceSettings;
    private javax.swing.JPanel pnlMedicalPersonnel;
    private javax.swing.JPanel pnlMiniReg;
    private javax.swing.JPanel pnlPatientsInLine;
    private javax.swing.JPanel pnlPatientsToBeCharged;
    private javax.swing.JPanel pnlReport;
    private javax.swing.JPanel pnlReportDaily;
    private javax.swing.JPanel pnlReportWeeklyMonthly;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JScrollPane pnlWeekly;
    private javax.swing.JPanel report;
    private javax.swing.JLayeredPane reportContainer;
    private javax.swing.JPanel reportNav;
    private javax.swing.JScrollPane scrollpnlFullReg;
    private javax.swing.JTable tblMedicalPersonnel;
    private javax.swing.JTable tblPatientList;
    private javax.swing.JLabel total;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtFollowUpDate;
    private javax.swing.JTextField txtFullAllergies;
    private javax.swing.JTextField txtFullCardiac;
    private javax.swing.JTextField txtFullCity;
    private javax.swing.JTextField txtFullCoffe;
    private javax.swing.JTextField txtFullDateofVirth;
    private javax.swing.JTextField txtFullDiabetic;
    private javax.swing.JTextField txtFullDigestive;
    private javax.swing.JTextField txtFullGrossAnnual;
    private javax.swing.JTextField txtFullHeight;
    private javax.swing.JTextArea txtFullHospitalTreated;
    private javax.swing.JTextField txtFullHyperTensitive;
    private javax.swing.JTextArea txtFullMajorSurgeries;
    private javax.swing.JTextField txtFullMiddleName;
    private javax.swing.JTextField txtFullMuscular;
    private javax.swing.JTextField txtFullNeurological;
    private javax.swing.JTextField txtFullNextArea;
    private javax.swing.JTextField txtFullNextCity;
    private javax.swing.JTextField txtFullNextFirstName;
    private javax.swing.JTextField txtFullNextMiddleName;
    private javax.swing.JTextField txtFullNextState;
    private javax.swing.JTextField txtFullNextStreet;
    private javax.swing.JTextField txtFullNextSurname;
    private javax.swing.JTextField txtFullNextWork;
    private javax.swing.JTextField txtFullNoCigaretter;
    private javax.swing.JTextField txtFullNoDrinks;
    private javax.swing.JTextField txtFullNoOfDependents;
    private javax.swing.JTextField txtFullOrthopedic;
    private javax.swing.JTextField txtFullPermanentArea;
    private javax.swing.JTextField txtFullPermanentCity;
    private javax.swing.JTextField txtFullPermanentNo;
    private javax.swing.JTextField txtFullPermanentStreet;
    private javax.swing.JTextField txtFullPermanentsState;
    private javax.swing.JTextField txtFullPresentState;
    private javax.swing.JTextArea txtFullPreviousTreatment;
    private javax.swing.JTextField txtFullRegularMeals;
    private javax.swing.JTextField txtFullRespiratory;
    private javax.swing.JTextField txtFullSoftDrinks;
    private javax.swing.JTextField txtFullSpecificDrugs;
    private javax.swing.JTextField txtFullState;
    private javax.swing.JTextArea txtFullStatement;
    private javax.swing.JTextField txtFullStimulants;
    private javax.swing.JTextField txtFullStreet;
    private javax.swing.JTextField txtFullStreetNo;
    private javax.swing.JTextField txtFullSurname;
    private javax.swing.JTextField txtFullWeight;
    private javax.swing.JTextField txtFullWork;
    private javax.swing.JTextField txtFullnextNo;
    private javax.swing.JTextField txtInvoiceOpid;
    private javax.swing.JTextField txtMedicalCity;
    private javax.swing.JTextField txtMedicalCountry;
    private javax.swing.JTextField txtMedicalFirstName;
    private javax.swing.JTextField txtMedicalMiddleName;
    private javax.swing.JTextField txtMedicalNo;
    private javax.swing.JTextField txtMedicalStreet;
    private javax.swing.JTextField txtMedicalSurname;
    private javax.swing.JTextField txtMedicalWork;
    // End of variables declaration//GEN-END:variables

    private void fillNavigationList() {
        navList.add(btnAppointment);
        navList.add(btnCharge);
        navList.add(btnFullReg);

    }

    private void setContainerContent() {
        pnlMiniReg.setSize(container.getWidth(), container.getHeight());
        pnlMiniReg.setBackground(Color.red);
        pnlFullReg.setSize(container.getWidth(), container.getHeight());
    }
//
//    private void changePanel(JComponent container, JComponent pnl) {
//        container.removeAll();
//        container.add(pnl);
//        container.repaint();
//        container.validate();
//    }

    private void showPnlMiniRegControls() {
        pnlMiniReg.removeAll();
        pnlMiniReg.revalidate();
        pnlMiniReg.repaint();

        pnlMiniReg.setLayout(new GridBagLayout());

        lblTitle = new JLabel("Mini registration form");
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 22));
        addControlToPanel(pnlMiniReg, lblTitle, 1, 0.1, 0, 1);

        addControlToPanel(pnlMiniReg, lblDate, 0, 0.1, 0, 2);
        addControlToPanel(pnlMiniReg, txtDate, 0, 0.1, 1, 2);

        addControlToPanel(pnlMiniReg, lblName, 0.1, 0.1, 0, 3);
        addControlToPanel(pnlMiniReg, txtName, 1, 0.1, 1, 3);

        addControlToPanel(pnlMiniReg, lblMiddleName, 1, 0.1, 0, 4);
        addControlToPanel(pnlMiniReg, txtMiddleName, 1, 0.1, 1, 4);

        addControlToPanel(pnlMiniReg, lblSurname, 1, 0.1, 0, 5);
        addControlToPanel(pnlMiniReg, txtSurname, 1, 0.1, 1, 5);

        addControlToPanel(pnlMiniReg, lblSex, 1, 0.1, 0, 6);

        addControlToPanel(pnlMiniReg, ddlSex, 1, 0.1, 1, 6);

        addControlToPanel(pnlMiniReg, lblDateOfBirth, 1, 0.1, 0, 7);
        addControlToPanel(pnlMiniReg, txtDateOfBirth, 1, 0.1, 1, 7);

        //addControlToPanel(pnlMiniReg,lblTelephone1,1,0.1, 0,8);
//        fillDdlContactType(ddlContactType);
//        addControlToPanel(pnlMiniReg,txtTelephone1,1,0.1, 1,8);
        //addControlToPanel(pnlMiniReg,lblTelephone2,1,0.1, 0,9);
        addControlToPanel(pnlMiniReg, ddlContactType, 1, 0.1, 0, 9);
        addControlToPanel(pnlMiniReg, txtTelephone2, 1, 0.1, 1, 9);

        addControlToPanel(pnlMiniReg, lblNextOfKinName, 1, 0.1, 0, 10);
        addControlToPanel(pnlMiniReg, txtNextOfKinName, 1, 0.1, 1, 10);

        addControlToPanel(pnlMiniReg, lblNextOfKinMiddleName, 1, 0.1, 0, 11);
        addControlToPanel(pnlMiniReg, txtNextOfKinMiddleName, 1, 0.1, 1, 11);

        addControlToPanel(pnlMiniReg, lblNextOfKinSurname, 1, 0.1, 0, 12);
        addControlToPanel(pnlMiniReg, txtNextOfKinSurname, 1, 0.1, 1, 12);

        addControlToPanel(pnlMiniReg, lblRelationship, 1, 0.1, 0, 13);
        addControlToPanel(pnlMiniReg, ddlRelationship, 1, 0.1, 1, 13);

        addControlToPanel(pnlMiniReg, lblStatementOfComplaint, 1, 0.1, 0, 14);
        addControlToPanel(pnlMiniReg, txtStatementOfComplaint, 1, 1, 1, 14, "p");

        addControlToPanel(pnlMiniReg, btnAddEmergencyPatient, 1, 1, 1, 15);
        btnAddEmergencyPatient.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addEmergencyPatient();
            }
        });

        fillDdlWithObject(manager.getSexes(), ddlSex);

        fillDdlContactType(ddlContactType);
        fillDdlRelationship(ddlRelationship);

    }

    private void addControlToPanel(JPanel pnl, JComponent control, double wx, double wy, int x, int y) {
        GridBagConstraints gbc = new GridBagConstraints();
        //x = col
        //y = row
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.weightx = wx;
        gbc.weighty = wy;
        gbc.anchor = GridBagConstraints.LINE_START;
        gbc.fill = GridBagConstraints.NONE;

        gbc.insets = new Insets(0, 20, 0, 0);

        pnl.add(control, gbc);
    }

    private void addControlToPanel(JPanel pnl, JComponent control, double wx, double wy, int x, int y, String p) {
        GridBagConstraints gbc = new GridBagConstraints();

        gbc.gridx = x;
        gbc.gridy = y;
        gbc.weightx = wx;
        gbc.weighty = wy;
        gbc.anchor = GridBagConstraints.FIRST_LINE_START;
        gbc.fill = GridBagConstraints.NONE;

        pnl.add(control, gbc);

        gbc.weightx = 15;
        JLabel lb = new JLabel();
        pnl.add(lb, gbc);
    }

    private void fillDdlRelationship(JComboBox ddl) {
        for (Relationship m : manager.getRelationships()) {
            ddl.addItem(m);

        }
    }

    private void fillDdlContactType(JComboBox ddl) {
        for (ContactType m : manager.getContactTypes()) {
            ddl.addItem(m);

        }
    }

    private void fillDdlMaritalStatus(JComboBox ddl) {
        for (MaritalStatus m : manager.getMaritalStatuses()) {
            ddl.addItem(m);

        }
    }

    private void fillDdlPincode(JComboBox ddl) {
        for (Pincode m : manager.getPincodes()) {
            ddl.addItem(m);

        }
    }

    private void fillDdlOccupation(JComboBox ddl) {
        for (Occupation m : manager.getOccupations()) {
            ddl.addItem(m);

        }
    }

    private void fillDdlBoolean(JComboBox ddl) {
        ddl.addItem("No");
        ddl.addItem("Yes");

    }

    private void addEmergencyPatient() {
        Sex sex = (Sex) ddlSex.getSelectedItem();
        Relationship rel = (Relationship) ddlRelationship.getSelectedItem();
        ContactType type = (ContactType) ddlContactType.getSelectedItem();

        NextOfKin kin = new NextOfKin(txtNextOfKinName.getText(), txtNextOfKinMiddleName.getText(), txtNextOfKinSurname.getText(), manager.getRelationship(rel.getIdRelationship()));

        Contact contact = new Contact(txtTelephone2.getText(), manager.getContactType(type.getIdContactType()));

        manager.addEmergencyNextOfKin(kin);
        manager.addContact(contact);

        Patient p = new Patient(txtName.getText(), txtMiddleName.getText(), txtSurname.getText(), manager.getSex(sex.getIdSex()), Utilities.getSqlDate(txtDateOfBirth.getText()), manager.getContact(contact), manager.getNextOfKin(kin), txtStatementOfComplaint.getText());

        manager.addEmergencyPatient(p);

        emergencyPatients.add(manager.getPatient(p));

        refreshEmergencyPatientView();

        resetMiniReg();

    }

    private void addPatient() {
        Patient patient = getPatient();

        manager.addPatient(patient);

        patientList.add(manager.getPatient(patient));

        btnFullSendToDoctor.setEnabled(true);
        Statics.patient = manager.getPatient(patient);

        refreshPatientListView();
    }

    private boolean getBooleanFromDdl(JComboBox ddl) {
        return ddl.getSelectedItem().equals("Yes");

    }

    private void addDoctor() {
        Pincode pincode = (Pincode) ddlMedicalPincode.getSelectedItem();
        Contact contact = new Contact(txtMedicalWork.getText(), manager.getContactType(1));
        manager.addContact(contact);

        Address address = new Address(txtMedicalStreet.getText(), txtMedicalNo.getText(), pincode);
        manager.addAddress(address);

        Doctor d = new Doctor(txtMedicalFirstName.getText(), txtMedicalMiddleName.getText(), txtMedicalSurname.getText(), manager.getAddress(address), manager.getContact(contact), getBooleanFromDdl(ddlMedicalAvailable));

        manager.addDoctor(d);

        addPersonnelToTable(d, (DefaultTableModel) tblMedicalPersonnel.getModel());
    }

    private void addMedicalPersonnel() {
        Pincode pincode = (Pincode) ddlMedicalPincode.getSelectedItem();
        Occupation occupation = (Occupation) ddlMedicalOccupation.getSelectedItem();
        Contact contact = new Contact(txtMedicalWork.getText(), manager.getContactType(1));
        manager.addContact(contact);

        Address address = new Address(txtMedicalStreet.getText(), txtMedicalCity.getText(), pincode);
        manager.addAddress(address);

        MedicalPersonnel medicalPersonnel = new MedicalPersonnel(txtMedicalFirstName.getText(), txtMedicalMiddleName.getText(), txtMedicalSurname.getText(), manager.getAddress(address), manager.getContact(contact), occupation);

        manager.addMedicalPersonnel(medicalPersonnel);

        addPersonnelToTable(medicalPersonnel, (DefaultTableModel) tblMedicalPersonnel.getModel());
    }

    private void fillTableMedicalPersonnel() {

        DefaultTableModel model = (DefaultTableModel) tblMedicalPersonnel.getModel();

        for (int i = 0; i < manager.getMedicalPersonnels().size(); i++) {

            addPersonnelToTable(manager.getMedicalPersonnels().get(i), model);

        }

        for (int i = 0; i < manager.getDoctors().size(); i++) {

            addPersonnelToTable(manager.getDoctors().get(i), model);

        }

        try {
            tblMedicalPersonnel.removeColumn(tblMedicalPersonnel.getColumnModel().getColumn(4));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    private void setPersonnelDataForEditing(Person person) {
        txtMedicalFirstName.setText(person.getFirstName());
        txtMedicalMiddleName.setText(person.getMiddleName());
        txtMedicalSurname.setText(person.getSurname());
        txtMedicalStreet.setText(person.getPresentAddress().getStreet());
        txtMedicalNo.setText(person.getPresentAddress().getDoorNo());

        String value = person.getPresentAddress().getPincode().getValue();

        changeDdlValue(ddlMedicalPincode, value);
        txtMedicalWork.setText(person.getContact().getContactDetail());
        txtMedicalCity.setText(person.getPresentAddress().getPincode().getCity().getName());

        if (person instanceof MedicalPersonnel) {
            MedicalPersonnel p = (MedicalPersonnel) person;
            String occupation = p.getOccupation().getOccupation();
            changeDdlValue(ddlMedicalOccupation, occupation);

            changeDdlValue(ddlMedicalDoctor, "No");

            ddlMedicalAvailable.setEnabled(false);
        }

    }

    private void addPersonnelToTable(Person personnel, DefaultTableModel model) {
        Object rowData[] = new Object[5];

        rowData[0] = personnel.getFirstName();
        rowData[1] = personnel.getMiddleName();
        rowData[2] = personnel.getSurname();
        //nevidljivi col, odnodno nije vidljiv u jtable, ali je vidljiv u modelu
        rowData[4] = personnel.getId();

        if (personnel instanceof MedicalPersonnel) {
            rowData[3] = "No";
        } else if (personnel instanceof Doctor) {
            rowData[3] = "Yes";
        }

        model.addRow(rowData);
    }

    private void changeDdlValue(JComboBox ddl, String value) {
        for (int i = 0; i < ddl.getItemCount(); i++) {

            if ((ddl.getModel().getElementAt(i)).equals(value)) {
                ddl.setSelectedIndex(i);
                ddl.updateUI();
                //System.out.println(ddl.getModel().getElementAt(i));

            }
//            else{
//             ddl.setSelectedIndex(1);
//                ddl.updateUI();
//            }

        }

//ddl.getModel().setSelectedItem(value);
    }

    private void changeDdlValue(JComboBox ddl, Boolean isValue) {
        String value = "";
        if (isValue) {
            value = "Yes";
        } else {
            value = "No";
        }
        for (int i = 0; i < ddl.getItemCount(); i++) {
            if ((ddl.getModel().getElementAt(i)).toString().equals(value)) {
                ddl.setSelectedIndex(i);
                ddl.updateUI();
            }
        }
    }

    private Doctor getDoctorFromMedical() {
        Pincode pincode = (Pincode) ddlMedicalPincode.getSelectedItem();
        Contact contact = new Contact(txtMedicalWork.getText(), manager.getContactType(1));
        Address address = new Address(txtMedicalStreet.getText(), txtMedicalNo.getText(), pincode);

        Doctor d = new Doctor(getIdFromTable(tblMedicalPersonnel, 4), txtMedicalFirstName.getText(), txtMedicalMiddleName.getText(), txtMedicalSurname.getText(), manager.getAddress(address), manager.getContact(contact), getBooleanFromDdl(ddlMedicalAvailable));

        return d;

    }

    private MedicalPersonnel getMedicalPersonnelFromMedical() {
        Pincode pincode = (Pincode) ddlMedicalPincode.getSelectedItem();
        Contact contact = new Contact(txtMedicalWork.getText(), manager.getContactType(1));
        Address address = new Address(txtMedicalStreet.getText(), txtMedicalNo.getText(), pincode);

        Occupation occupation = (Occupation) ddlMedicalOccupation.getSelectedItem();

        MedicalPersonnel m = new MedicalPersonnel(getIdFromTable(tblMedicalPersonnel, 4), txtMedicalFirstName.getText(), txtMedicalMiddleName.getText(), txtMedicalSurname.getText(), manager.getAddress(address), manager.getContact(contact), occupation);

        return m;

    }

    private int getIdFromTable(JTable table, int col) {
        int row = table.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        String idText = model.getValueAt(row, col).toString();

//String idText= table.getValueAt(row, col).toString();
        int id = Utilities.getNumber(idText);

        return id;
    }

    private void fillInvoiceWithData(Patient patient) {
        lblChargeOpid.setText(String.valueOf(patient.getId()));
        lblChargeName.setText(patient.getFirstName());
        lblChargeSurname.setText(patient.getSurname());

        PaymentType paymentType = (PaymentType) ddlInvoicePayment.getSelectedItem();

        Date date = new Date(Calendar.getInstance().getTime().getTime());

        Invoice invoice = new Invoice();
        invoice.setPatient(patient);
        invoice.setPaymentType(paymentType);
        invoice.setDate(date);

        manager.addInvoice(invoice);

        lblChargeInvoiceNo.setText(manager.getInvoice(invoice).getInvoiceNo());
        lblChargeInvoiceDate.setText(String.valueOf(date));

        Double priceWithoutVat = 0.0;

        List<Item> itemList = manager.getItemsPerPatient(patient);
        for (int i = 0; i < itemList.size(); i++) {
            lblChargetestDetails.setText(itemList.get(i).getTest().getName());
            lblChargeTestPrice.setText(String.valueOf(itemList.get(i).getTest().getPrice()));
            priceWithoutVat += itemList.get(i).getTest().getPrice();

            lblChargeMedicationDetails.setText(itemList.get(i).getMedicine().getMedicine());
            lblChargeMedicationPrice.setText(String.valueOf(itemList.get(i).getMedicine().getPrice()));
            priceWithoutVat += itemList.get(i).getMedicine().getPrice();

            lblChargeConsultationDetails.setText(itemList.get(i).getConsultation().getConsultation());
            lblChargeConsultationPrice.setText(String.valueOf(itemList.get(i).getConsultation().getPrice()));
            priceWithoutVat += itemList.get(i).getConsultation().getPrice();

        }

        total.setText(ddlInvoicePayment.getSelectedItem().toString());

        lblChargeSum.setText(String.valueOf(priceWithoutVat));
        lblChargeVat.setText(VAT + "%");
        double totatPrice = (priceWithoutVat * 0.25) + priceWithoutVat;
        lblChargeTotal.setText(String.valueOf(totatPrice));

        invoice.setSum(totatPrice);
        manager.addInvoiceSum(invoice);
    }

    private void fillDdlWithObject(List<?> list, JComboBox ddl) {

        for (Object o : list) {
            ddl.addItem(o);

        }
    }

    private void fillDailyReportData() {
        int noFoPatientsSeenByVariousDoctors = manager.getNoOfPatientsSeenByVariousDoctors(today);
        int noFollowUpPatients = manager.getNoOfFollowUpPatients(today);
        int noNewPatients = manager.getNoOfNewPatients(today);

        lblReportDailyPatientsSeenByVariousDoctors.setText(String.valueOf(noFoPatientsSeenByVariousDoctors));
        lblReportDailyFollowUpPatients.setText(String.valueOf(noFollowUpPatients));
        lblReportDailyNewPatients.setText(String.valueOf(noNewPatients));

    }

    private int patientID = 0;

    private void fillChart(int newPatients, int followupPatients) {

        pnlReportWeeklyMonthly.removeAll();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        dataset.addValue(newPatients, "Number", "New Patiens");
        dataset.addValue(followupPatients, "Number", "Follow-up Patients");

        JFreeChart barChart = ChartFactory.createBarChart3D(
                "New and follow-up patients handled",
                "",
                "",
                dataset,
                PlotOrientation.VERTICAL,
                false, false, false);

        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new java.awt.Dimension(400, 300));

        pnlReportWeeklyMonthly.add(chartPanel);
        pnlReportWeeklyMonthly.validate();
    }

    private void refreshEmergencyPatientView() {
        pnlEmergencyPatients.removeAll();
        pnlEmergencyPatients.revalidate();
        pnlEmergencyPatients.repaint();
        JLabel title = new JLabel("Emergency patients\n");
        pnlEmergencyPatients.add(title);
        for (int i = 0; i < emergencyPatients.size(); i++) {
            JLabel lbl = new JLabel(emergencyPatients.get(i).toString());
            lbl.setVisible(true);
            lbl.setForeground(Color.red);

            Patient p = emergencyPatients.get(i);
            lbl.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    setPatientDataForEditingAfterMiniRegistration(p);
                    GuiUtilities.changePanel(container, scrollpnlFullReg);
                    fillFullRegistrationWithAllDdls();
                    btnFullSendToDoctor.setEnabled(true);
                    Statics.patient = p;

                }

            });

            pnlEmergencyPatients.add(lbl);
            pnlEmergencyPatients.revalidate();
            pnlEmergencyPatients.repaint();
        }
    }

    private void refreshPatientListView() {
        pnlPatientsInLine.removeAll();
        pnlPatientsInLine.revalidate();
        pnlPatientsInLine.repaint();

        JLabel title = new JLabel("Patients in line\n");
        pnlPatientsInLine.add(title);
        for (int i = 0; i < patientList.size(); i++) {
            JLabel lbl = new JLabel(patientList.get(i).toString());
            lbl.setVisible(true);

            Patient p = patientList.get(i);
            lbl.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {

                    ChooseDoctor cd = new ChooseDoctor();
                    Statics.patient = p;
                }

            });

            pnlPatientsInLine.add(lbl);
            pnlPatientsInLine.revalidate();
            pnlPatientsInLine.repaint();
        }
    }

    private void refreshPatientsToBeCharged() {
        pnlPatientsToBeCharged.removeAll();
        pnlPatientsToBeCharged.revalidate();
        pnlPatientsToBeCharged.repaint();
        JLabel title = new JLabel("Patients to be charged");
        pnlPatientsToBeCharged.add(title);
        for (int i = 0; i < Statics.patiensToBeCharged.size(); i++) {
            JLabel lbl = new JLabel(Statics.patiensToBeCharged.get(i).toString());
            lbl.setVisible(true);

            Patient p = Statics.patiensToBeCharged.get(i);
            lbl.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    Statics.patient = p;
                    GuiUtilities.changePanel(container, pnlCharge);
                    txtInvoiceOpid.setText(String.valueOf(Statics.patient.getId()));
                    fillInvoiceWithData(Statics.patient);

                }

            });

            pnlPatientsToBeCharged.add(lbl);
            pnlPatientsToBeCharged.revalidate();
            pnlPatientsToBeCharged.repaint();
        }
    }

    private void setPatientDataForEditing(Patient patient) {
        txtFirstName.setText(patient.getFirstName());
        txtFullMiddleName.setText(patient.getMiddleName());
        txtFullSurname.setText(patient.getSurname());
        changeDdlValue(ddlFullSex, patient.getSex().getSex());
        txtFullDateofVirth.setText(String.valueOf(patient.getDateOfBirth()));
        changeDdlValue(ddlFullMarital, patient.getMaritalStatus().getStatus());
        txtFullNoOfDependents.setText(String.valueOf(patient.getNoOfDependents()));
        txtFullHeight.setText(String.valueOf(patient.getHeight()));
        txtFullWeight.setText(String.valueOf(patient.getWeight()));
        changeDdlValue(ddlFullBlood, patient.getBloodType().getBloodType());
        changeDdlValue(ddlFullOccupation, patient.getOccupation().getOccupation());
        txtFullGrossAnnual.setText(String.valueOf(patient.getGrossAnnualIncome()));
        changeDdlValue(ddlFullVegetarian, patient.isVegetarian());
        changeDdlValue(ddlFullSmoker, patient.isSmoker());
        txtFullNoCigaretter.setText(String.valueOf(patient.getNoCigarettesADay()));
        changeDdlValue(ddlFullAcohol, patient.isConsumesAlcohol());
        txtFullNoDrinks.setText(String.valueOf(patient.getNoDrinksADay()));
        txtFullStimulants.setText(patient.getStimulants());
        txtFullCoffe.setText(String.valueOf(patient.getCoffeeTeaDay()));
        txtFullSoftDrinks.setText(String.valueOf(patient.getSoftDrinksDay()));
        txtFullRegularMeals.setText(patient.getRegularMeals());
        changeDdlValue(ddlFullHomeFood, patient.isHomeFood());
        txtFullStatement.setText(patient.getStatementOfComplaint());
        txtFullPreviousTreatment.setText(patient.getPreviousTreatments());
        txtFullHospitalTreated.setText(patient.getPhysicianHospitalTreated());
        txtFullDiabetic.setText(patient.getDiabetic());
        txtFullHyperTensitive.setText(patient.getHypertensive());
        txtFullCardiac.setText(patient.getCardiacCondition());
        txtFullRespiratory.setText(patient.getRespiratoryCondition());
        txtFullDigestive.setText(patient.getDigestiveCondition());
        txtFullOrthopedic.setText(patient.getOrthopedicCondtion());
        txtFullMuscular.setText(patient.getMuscularCondition());
        txtFullAllergies.setText(patient.getKnownAllergies());
        txtFullSpecificDrugs.setText(patient.getKnownReactionToSpecificDrug());
        txtFullMajorSurgeries.setText(patient.getMajorSurgeriesHistory());

        changeDdlValue(ddlFullRelationship, patient.getNextOfKin().getRelationship().getName());
        changeDdlValue(ddlFullPincode, patient.getPresentAddress().getPincode().getValue());
        changeDdlValue(ddlFullPermanentPincode, patient.getPermanentAddress().getPincode().getValue());
        changeDdlValue(ddlFullKinPincode, patient.getNextOfKin().getPresentAddress().getPincode().getValue());

        //contact
        txtFullWork.setText(patient.getContact().getContactDetail());

        txtFullWork.setText(patient.getContact().getContactDetail());

        //address
        txtFullStreet.setText(patient.getPresentAddress().getStreet());
        txtFullStreetNo.setText(patient.getPresentAddress().getDoorNo());
        txtFullPermanentStreet.setText(patient.getPermanentAddress().getStreet());
        txtFullPermanentNo.setText(patient.getPermanentAddress().getDoorNo());
        txtFullNextStreet.setText(patient.getNextOfKin().getPresentAddress().getStreet());
        txtFullnextNo.setText(patient.getNextOfKin().getPresentAddress().getDoorNo());
        txtFullNextFirstName.setText(patient.getNextOfKin().getFirstName());
        txtFullNextMiddleName.setText(patient.getNextOfKin().getMiddleName());
        txtFullNextSurname.setText(patient.getNextOfKin().getSurname());

        patientID = patient.getId();

    }

    private void setPatientDataForEditingAfterMiniRegistration(Patient patient) {
        txtFirstName.setText(patient.getFirstName());
        txtFullMiddleName.setText(patient.getMiddleName());
        txtFullSurname.setText(patient.getSurname());
        changeDdlValue(ddlFullSex, patient.getSex().getSex());
        //txtFullDateofVirth.setText(String.valueOf(patient.getDateOfBirth()));
        txtFullDateofVirth.setText(Utilities.getDateAsString(patient.getDateOfBirth()));
        txtFullWork.setText(patient.getContact().getContactDetail());
        txtFullNextFirstName.setText(patient.getNextOfKin().getFirstName());
        txtFullNextMiddleName.setText(patient.getNextOfKin().getMiddleName());
        txtFullNextSurname.setText(patient.getNextOfKin().getSurname());
        changeDdlValue(ddlFullRelationship, patient.getNextOfKin().getRelationship().getName());
        txtFullStatement.setText(patient.getStatementOfComplaint());

        patientID = patient.getId();

    }

    private Patient getPatient() {
        Sex sex = (Sex) ddlFullSex.getSelectedItem();
        Relationship rel = (Relationship) ddlFullRelationship.getSelectedItem();
        Pincode pincode = (Pincode) ddlFullPincode.getSelectedItem();
        Pincode permanentPincode = (Pincode) ddlFullPermanentPincode.getSelectedItem();
        Pincode kinPincode = (Pincode) ddlFullKinPincode.getSelectedItem();
        Occupation occupation = (Occupation) ddlFullOccupation.getSelectedItem();
        BloodType blood = (BloodType) ddlFullBlood.getSelectedItem();
        MaritalStatus maritalStatus = (MaritalStatus) ddlFullMarital.getSelectedItem();

        Contact contact = new Contact(txtFullWork.getText(), manager.getContactType(1));
        Contact nextContact = new Contact(txtFullWork.getText(), manager.getContactType(1));

        manager.addContact(contact);
        manager.addContact(nextContact);

        Address presentAddress = new Address(txtFullStreet.getText(), txtFullStreetNo.getText(), pincode);
        Address permanentAddress = new Address(txtFullPermanentStreet.getText(), txtFullPermanentNo.getText(), permanentPincode);
        Address nextOfKinAddress = new Address(txtFullNextStreet.getText(), txtFullnextNo.getText(), kinPincode);

        manager.addAddress(presentAddress);
        manager.addAddress(permanentAddress);
        manager.addAddress(nextOfKinAddress);

        NextOfKin kin = new NextOfKin(txtFullNextFirstName.getText(), txtFullNextMiddleName.getText(), txtFullNextSurname.getText(), manager.getAddress(nextOfKinAddress), rel, manager.getContact(nextContact));
        manager.addNextOfKin(kin);

        Patient patient = new Patient(txtFirstName.getText(), txtFullMiddleName.getText(), txtFullSurname.getText(), sex, Utilities.getSqlDate(txtFullDateofVirth.getText()), manager.getAddress(presentAddress), manager.getAddress(permanentAddress), manager.getContact(contact), manager.getNextOfKin(kin), maritalStatus, Utilities.getNumber(txtFullNoOfDependents.getText()), Utilities.getNumber(txtFullHeight.getText()), Utilities.getNumber(txtFullWeight.getText()), blood, occupation, Utilities.getDouble(txtFullGrossAnnual.getText()), getBooleanFromDdl(ddlFullVegetarian), getBooleanFromDdl(ddlFullSmoker), Utilities.getNumber(txtFullNoCigaretter.getText()), getBooleanFromDdl(ddlFullAcohol), Utilities.getNumber(txtFullNoDrinks.getText()), txtFullStimulants.getText(), Utilities.getNumber(txtFullCoffe.getText()), Utilities.getNumber(txtFullSoftDrinks.getText()), txtFullRegularMeals.getText(), getBooleanFromDdl(ddlFullHomeFood), txtFullStatement.getText(), txtFullPreviousTreatment.getText(), txtFullHospitalTreated.getText(), txtFullDiabetic.getText(), txtFullHyperTensitive.getText(), txtFullCardiac.getText(), txtFullRespiratory.getText(), txtFullDigestive.getText(), txtFullOrthopedic.getText(), txtFullMuscular.getText(), txtFullAllergies.getText(), txtFullSpecificDrugs.getText(), txtFullMajorSurgeries.getText());

        return patient;
    }

    private Patient getPatient(int idPatient) {
        Sex sex = (Sex) ddlFullSex.getSelectedItem();
        Relationship rel = (Relationship) ddlFullRelationship.getSelectedItem();
        Pincode pincode = (Pincode) ddlFullPincode.getSelectedItem();
        Pincode permanentPincode = (Pincode) ddlFullPermanentPincode.getSelectedItem();
        Pincode kinPincode = (Pincode) ddlFullKinPincode.getSelectedItem();
        Occupation occupation = (Occupation) ddlFullOccupation.getSelectedItem();
        BloodType blood = (BloodType) ddlFullBlood.getSelectedItem();
        MaritalStatus maritalStatus = (MaritalStatus) ddlFullMarital.getSelectedItem();

        Contact contact = new Contact(txtFullWork.getText(), manager.getContactType(1));
        Contact nextContact = new Contact(txtFullWork.getText(), manager.getContactType(1));

        manager.addContact(contact);
        manager.addContact(nextContact);

        Address presentAddress = new Address(txtFullStreet.getText(), txtFullStreetNo.getText(), pincode);
        Address permanentAddress = new Address(txtFullPermanentStreet.getText(), txtFullPermanentNo.getText(), permanentPincode);
        Address nextOfKinAddress = new Address(txtFullNextStreet.getText(), txtFullnextNo.getText(), kinPincode);

        manager.addAddress(presentAddress);
        manager.addAddress(permanentAddress);
        manager.addAddress(nextOfKinAddress);

        NextOfKin kin = new NextOfKin(txtFullNextFirstName.getText(), txtFullNextMiddleName.getText(), txtFullNextSurname.getText(), manager.getAddress(nextOfKinAddress), rel, manager.getContact(nextContact));
        manager.addNextOfKin(kin);

        Patient patient = new Patient(idPatient, txtFirstName.getText(), txtFullMiddleName.getText(), txtFullSurname.getText(), sex, Utilities.getSqlDate(txtFullDateofVirth.getText()), manager.getAddress(presentAddress), manager.getAddress(permanentAddress), manager.getContact(contact), manager.getNextOfKin(kin), maritalStatus, Utilities.getNumber(txtFullNoOfDependents.getText()), Utilities.getNumber(txtFullHeight.getText()), Utilities.getNumber(txtFullWeight.getText()), blood, occupation, Utilities.getDouble(txtFullGrossAnnual.getText()), getBooleanFromDdl(ddlFullVegetarian), getBooleanFromDdl(ddlFullSmoker), Utilities.getNumber(txtFullNoCigaretter.getText()), getBooleanFromDdl(ddlFullAcohol), Utilities.getNumber(txtFullNoDrinks.getText()), txtFullStimulants.getText(), Utilities.getNumber(txtFullCoffe.getText()), Utilities.getNumber(txtFullSoftDrinks.getText()), txtFullRegularMeals.getText(), getBooleanFromDdl(ddlFullHomeFood), txtFullStatement.getText(), txtFullPreviousTreatment.getText(), txtFullHospitalTreated.getText(), txtFullDiabetic.getText(), txtFullHyperTensitive.getText(), txtFullCardiac.getText(), txtFullRespiratory.getText(), txtFullDigestive.getText(), txtFullOrthopedic.getText(), txtFullMuscular.getText(), txtFullAllergies.getText(), txtFullSpecificDrugs.getText(), txtFullMajorSurgeries.getText());

        return patient;
    }

    private void fillFullRegistrationWithAllDdls() {
        fillDdlWithObject(manager.getBloodTypes(), ddlFullBlood);
        fillDdlWithObject(manager.getSexes(), ddlFullSex);

        fillDdlRelationship(ddlFullRelationship);
        fillDdlMaritalStatus(ddlFullMarital);
        fillDdlPincode(ddlFullPincode);
        fillDdlPincode(ddlFullPermanentPincode);
        fillDdlPincode(ddlFullKinPincode);
        fillDdlOccupation(ddlFullOccupation);
        fillDdlBoolean(ddlFullSmoker);
        fillDdlBoolean(ddlFullVegetarian);
        fillDdlBoolean(ddlFullAcohol);
        fillDdlBoolean(ddlFullHomeFood);
    }

    private void fillPatientList() {
        Object rowData[] = new Object[4];
        DefaultTableModel model = (DefaultTableModel) tblPatientList.getModel();

        List<Patient> list = manager.getPatients();

        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getId();
            rowData[1] = list.get(i).getFirstName();
            rowData[2] = list.get(i).getSurname();
            if (!manager.getDoctorsPerPatient(list.get(i).getId()).isEmpty()) {
                Patient p = list.get(i);
                rowData[3] = manager.getDoctorsPerPatient(p.getId()).get(0).getId();
            }

            model.addRow(rowData);
        }

    }

    private void resetMiniReg() {
        txtName.setText("");
        txtSurname.setText("");
        txtMiddleName.setText("");
        txtDateOfBirth.setText("");
        txtTelephone2.setText("");
        txtNextOfKinMiddleName.setText("");
        txtNextOfKinName.setText("");
        txtNextOfKinSurname.setText("");
        txtStatementOfComplaint.setText("");
        ddlContactType.setSelectedIndex(0);
        ddlRelationship.setSelectedIndex(0);

    }

}
